FORMAT: 1A
HOST: https://api-sandbox.split.cash/

# Split API V1
![Split](https://raw.githubusercontent.com/krakendevelopments/public_assets/master/images/Split_Logo_rgb.png)

Welcome to the Split V1 API documentation. Use the Split API to help streamline your financial processes and supercharge your current system.

## Quick start

### 1. Create a Split account
If you haven't already, you'll want to create a sandbox Split account at https://go-sandbox.split.cash

### 2. Register your application with Split
Once you've got your account up and running, sign in and create an OAuth2 profile for your application: https://go-sandbox.split.cash/oauth/applications

| Parameter | Description |
|-----------|-------------|
| **Name**  | The name of your application. When using the the *Authorisation Grant Flow*, users will see this name as the application requesting access to their account. |
| **Redirect URI** | Set this to your application's endpoint charged with receiving the authorisation code. If you're using [Postman](https://www.getpostman.com/) to play with the API, use the Postman callback URL: `https://www.getpostman.com/oauth2/callback` |

### 2.a Quick fun
Perform this optional step if you just want to play with the API without writing any code, otherwise continue to [3. Obtain authorisation code](#introduction/quick-start/3.-obtain-authorisation-code).

The following uses the OAuth2 process built-in to [Postman](https://www.getpostman.com/) in order to obtain an authorisation code from a user and finally exchange it for an access code.

1. Add the Split API collection to Postman: [![Run in Postman](https://run.pstmn.io/button.png)](https://www.getpostman.com/run-collection/7e421b9ba68f3d37bd7c)
2. Within Postman, click on any of the Split endpoints.
3. Click on the **Authorization** sub-tab.
4. Select **OAuth 2.0** in the **Type** dropdown.
5. Click **Get New Access Token**.
6. Fill in the form, replacing `{{ application_id }}` & `{{ application_secret }}` with the ones you got when you registered your app in step 2.
![Postman OAuth2](https://raw.githubusercontent.com/krakendevelopments/public_assets/master/images/postman_oauth2_form.png)
7. Click **Request Token** and wait a few seconds.
8. Go through the authorisation process, once complete, Postman will store the `access_token` and `refresh_token` for you to use in subsequent requests.
9. Click on **Use Token** and Postman will automatically place the newly acquired **access_token** in the request header, ready for your first request to the SPlit API.
10. You no longer have to perform the following steps 3, 4 & 5.

### 3. Obtain authorisation code
Construct the initial URL the user will need to visit in order to grant your application permission to act on his/her behalf. The constructed URL describes the level of permission (`scope`),
the application requesting permission (`client_id`) and where the user gets redirected once they've grant permission (`redirect_uri`).

The URL should be formatted to look like this:
`https://go-sandbox.split.cash/oauth/authorize?response_type=code&client_id={client_id}&redirect_uri={redirect_uri}&scope={scope}`

| Parameter | Description |
|-----------|-------------|
| `response_code` | Always set to `code` |
| `client_id` | This is your `Application Id` as generated when you registered your application with Split |
| `redirect_uri` | URL where the user will get redirected along with the newly generated authorisation code |
| `scope` | The scope of permission you're requesting |

### 4. Exchange authorisation code for access token
When the user visits the above-mentioned URL, they will be presented with a Split login screen and then an authorisation screen:
![Split authorisation screen](https://raw.githubusercontent.com/krakendevelopments/public_assets/master/images/oauth_authorise.png)

After the user has visited the URL in step 3 and authorised your application, the will be returned to your application at the URL specified in `redirect_uri` along with the `code` query parameter as the authorisation code.

Finally, the authorisation code can than be exchanged for an access token and refresh token pair by POSTing to: `https://go-sandbox.split.cash/oauth/token`

| Parameter | Description |
|-----------|-------------|
| `grant_type` | Set to `authorization_code` |
| `client_id` | This is your `Application Id` as generated when you registered your application with Split |
| `client_secret` | This is your `Secret` as generated when you registered your application with Split |
| `code` | The authorisation code returned with the user |
| `redirect_uri` | Same URL used in step 3 |
| `scope` | The scope of permission you're requesting |

### 5. Wrap-up
You should now have an access token and refresh token which allows you to interact with the Split API as the user related to the access token.
To do so, you must simply append the access token to the header of any API request: `Authorization: Bearer {access_token}`

**Notes:**

* Often times you'll want to grant your own app access to itself. To do this, you must go through steps 1 to 4 and on step 3 authenticate using the same user that owns the application as registered with Split.
* As noted above, the access token expires every 2 hours. To get a new access token without going through steps 1 to 4 again, use the refresh grant strategy to swap a refresh token for a new access token.

## Schema

* All communication is via `https`
* The production API is accessed from `https://api.split.cash/`.
* The production UI is accessed from `https://go.split.cash/`.
* The sandbox API is accessed from `https://api-sandbox.split.cash/`
* The sandbox UI is accessed from `https://go-sandbox.split.cash/`
* Data is sent and received as JSON.
* Currencies are represented by 3 characters as defined in [ISO 4217](http://www.xe.com/iso4217.php).
* Dates & times are returned in UTC using [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format with millisecond accuracy.
* Amounts are always in cents with no decimals unless otherwise stated.
* This documentation and supporting tools uses the sandbox environment. When you're ready to go live simply remove the `-sandbox.` from the API URL.

## Playground
The best way to familiarise yourself with our API is by interacting with it. We suggest you use the free [Postman](https://www.getpostman.com/) app
where we've prepared all our API endpoints in a tidy collection ready for you to play with.

Click the button below to import our Split collection and get started:

[![Run in Postman](https://run.pstmn.io/button.png)](https://www.getpostman.com/run-collection/7e421b9ba68f3d37bd7c)

## Authentication and Authorisation
Split uses OAuth2 over https to manage authentication and authorisation.

We currently support the following types of OAuth2 grants:

### Authorisation Code Grant
This type of grant allows your application to act on behalf of a user. If you've ever used a website or application with your
Google, Twitter or Facebook account, this is the grant being used. See the [Getting Started section](#introduction/getting-started) more details.

#### Example POSTing an authorisation code with cURL to get an access & refresh token pair
**Request**

```
curl -F "grant_type=authorization_code" \
     -F "client_id={{ client_id }}" \
     -F "client_secret={{ client_secret }}" \
     -F "code={{ authorization_code }}" \
     -F "redirect_uri=https://www.getpostman.com/oauth2/callback" \
     -X POST "https://go-sandbox.split.cash/oauth/token"
```

**Response**

```
{
    "access_token":"dbaf9757982a9e738f05d249b7b5b4a266b3a139049317c4909f2f263572c781",
    "token_type":"bearer",
    "expires_in":7200,
    "refresh_token":"76ba4c5c75c96f6087f58a4de10be6c00b29ea1ddc3b2022ee2016d1363e3a7c",
    "scope":"public"
}
```

### Refresh Token Grant
When using the authorisation code grant above, Split will return a `refresh token` along with the access token. Access tokens are short lived and last 2 hours but refresh tokens do not expire.
When the access token expires, instead of sending the user back through the authorisation flow you can use the refresh token to retrieve a new access token with the same permissions as the old one.

> **Note:** The `refresh_token` gets regenerated and sent alongside the new `access_token`. In other words, `refresh_token`s are single use so you'll
want to store the newly generated `refresh_token` everytime you use it to get a new `acccess_token`

#### Example POSTing a refresh token with cURL to get a new access & refresh token pair
**Request**

```
curl -F "grant_type=refresh_token" \
     -F "client_id={{ client_id }}" \
     -F "client_secret={{ client_secret }}" \
     -F "refresh_token={{ refresh_token }}" \
     -X POST https://go-sandbox.split.cash/oauth/token
```

**Response**

```
{
    "access_token":"ad0b5847cb7d254f1e2ff1910275fe9dcb95345c9d54502d156fe35a37b93e80",
    "token_type":"bearer",
    "expires_in":7200,
    "refresh_token":"cc38f78a5b8abe8ee81cdf25b1ca74c3fa10c3da2309de5ac37fde00cbcf2815",
    "scope":"public"
}
```

<!---
### Client Credentials Grant
This is the grant you want to use when you want your application to act on an account which belongs to itself.                                             
--->

### Scopes
When requesting access you need to pass along with it the level of access you require. These are called scopes and Split supports the following:

| Scope | Description |
|--------|------------|
| `public` | View user's public information |
| `agreements` | Manage user's agreements **(Coming soon)** |
| `bank_accounts` | Manage user's bank accounts details |
| `contacts` | Manage user's contacts |
| `payments` | Manage user's payments |
| `payments_on_request` | Manage user's payments on request **(Coming soon)**|
| `refunds` | Manage user's refund requests |
| `transactions` | Access user's transactions |

## Pagination
All collections are paginated to 100 items by default. You can request the following page by appending `?page=x` where `x` is the page you'd like to retrieve.

You can extract the pagination information from the response header:

```
Link: <https://api-sandbox.split.cash/payments?page=2>; rel="next",
  <https://api-sandbox.split.cash/payments?page=15>; rel="last"
```

## Response Codes
The common [HTTP Response Status Codes](https://github.com/for-GET/know-your-http-well/blob/master/status-codes.md) are used with all responses.

## Glossary

| Term          | Description |
|---------------|-------------|
| **Split account** | In Split, transactions are conducted between accounts. Split currently supports `business` accounts with planned support for `personal` accounts in the near future. |
| **Split user**    | An authorised representative of a Split account |
| **Maturation date** | Every payment has a maturation date. This date tells us when we can process your payment. E.g. by default, we will wait 3 days from the day you created the payment before we debit your account in order to give you time to settle the funds in your account. The maturation date can be controlled when you create a new payment. |


# Group Agreements

> **NOTE**: This is an experimental feature that has not yet been released. Please contact us at [info@splitpayments.com.au](mailto:info@splitpayments.com.au) to get early access.

Split Agreements are managed on a per contact basis and allow two Split accounts to agree on terms in order to automate the [Payment on Request (PoR)](#reference/payments-on-request) approval process.

**Example**

*AgileSupplier frequently sends PoRs to SuperSeller. AgileSupplier would like the PoRs to SuperSeller under $500 to be automatically approved.*

*AgileSupplier sends an agreement request to SuperSeller containing the terms. SuperSeller approves the agreement request and all future PoRs from AgileSupplier under
$500 are automatically approved.*

## Types
Each agreement is unidirectional. In other words, an agreement is required for each PoR direction.

In order to identify the agreements, there are two types:

1. **Incoming:** Agreement received from another Split account
2. **Outgoing:** Agreement sent to another Split account

**Example**

*Split Account A (SAA) would like all the PoRs they send to Split Account B (SAB) up to $500 to be automatically approved. SAA therefore sends SBB an agreement request.*

*SAB would also like all the PoRs they sends to SAA up to $500 to be automatically approved. SAB therefore sends SAA and agreement request.*

## List or request agreement [/agreements{?page}]
**Endpoint:** `/agreements`

### List all agreements | GET [GET]

+ Parameters
    + page: 1 (optional) - page of results to return
    
+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
    
+ Response 200 (application/json)

    + Headers

            Link: <http:/api-sandbox.spli.cash/agreements?page=2>; rel="next", <http:/api-sandbox.split.cash/agreements?page=8>; rel="last"

    + Body
    
            [
                {
                    "id": "b7cb7f5d-a699-49b0-b895-97fb6b8ce191",
                    "account_nickname": "oustanding_tours",
                    "contact_id": null
                    "type": "incoming",
                    "status": "pending_approval",
                    "terms": {
                        "per_payment": {
                            "min": 0,
                            "max": 50000
                        }
                    }
                },
                {
                    "id": "7af3973b-f958-4b35-b2a6-1e54d2e8492e",
                    "account_nickname": "big_trucks",
                    "contact_id": "81a80df3-10aa-416f-a10a-77f4cd4a6c4d"
                    "type": "outgoing",
                    "status": "approved",
                    "terms": {
                        "per_payment": {
                            "min": 0,
                            "max": 50000
                        }
                    }
                },
                {
                    "id": "7af3973b-f958-4b35-b2a6-1e54d2e8492e",
                    "account_nickname": "big_trucks",
                    "contact_id": "81a80df3-10aa-416f-a10a-77f4cd4a6c4d"
                    "type": "incoming",
                    "status": "approved",
                    "terms": {
                        "per_payment": {
                            "min": 0,
                            "max": 50000
                        }
                    },
                },
                {
                    "id": "631277f2-93f8-4ec3-b83e-66ef366f3d3f",
                    "account_nickname": "crystal_lampers",
                    "contact_id": "c25f8705-754b-4ac6-b3e6-d8647a4a340b"
                    "type": "outgoing",
                    "status": "declined",
                    "terms": {
                        "per_payment": {
                            "min": 0,
                            "max": 980000
                        }
                    }
                }
            ]

### Send an agreement request | POST [POST]
    
+ Attributes
    + contact_id: `48b89364-1577-4c81-ba02-96705895d457` (string, required) - The ID of the recipient payment
    + terms
        + per_payment
            + min: 0 (number, required) - Minimum amount in cents a PoR must be in order to be auto-approved
            + max: 50000 (number, required) - Maximum amount in cents a PoR must be in order to be auto-approved

+ Request (application/json)

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9

+ Response 201 (application/json)

        {
            "id": "b7cb7f5d-a699-49b0-b895-97fb6b8ce191",
            "account_nickname": "oustanding_tours",
            "contact_id": "48b89364-1577-4c81-ba02-96705895d457"
            "type": "outgoing",
            "status": "pending_approval",
            "terms": {
                "per_payment": {
                    "min": 0,
                    "max": 50000
                }
            }
        }


## Manage agreements [/agreements/{id}]
**Endpoint:** `/agreements/{id}`

> **Note:** Approving an agreement request will automatically add the Split account to your contact list should it not already be there.

### Approve or decline an agreement request | PATCH [PATCH]

+ Parameters
    + id: `7af3973b-f958-4b35-b2a6-1e54d2e8492e` (required) - agreement ID

+ Attributes
    + status: `approve` (string, required) - Possible values: `approve`, `decline`

+ Request (application/json)

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
            
+ Response 200 (application/json)

        {
            "id": "7af3973b-f958-4b35-b2a6-1e54d2e8492e",
            "account_nickname": "big_trucks",
            "contact_id": "81a80df3-10aa-416f-a10a-77f4cd4a6c4d"
            "type": "incoming",
            "status": "approved",
            "terms": {
                "per_payment": {
                    "min": 0,
                    "max": 50000
                }
            }
        }

### Retrieve an agreement | GET [GET]

+ Parameters
    + id: `7af3973b-f958-4b35-b2a6-1e54d2e8492e` (required) - agreement ID
    
+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9

+ Response 200 (application/json)

        {
            "id": "7af3973b-f958-4b35-b2a6-1e54d2e8492e",
            "account_nickname": "big_trucks",
            "contact_id": "81a80df3-10aa-416f-a10a-77f4cd4a6c4d"
            "type": "incoming",
            "status": "approved",
            "terms": {
                "per_payment": {
                    "min": 0,
                    "max": 50000
                }
            }
        }
        

            
### Cancel an agreement | DELETE [DELETE]
Only outgoing agreements (agreements initated by the authenticated account) can be cancelled.

+ Parameters
    + id: `7af3973b-f958-4b35-b2a6-1e54d2e8492e` (required) - agreement ID

+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9

+ Response 204


# Group Bank Accounts
Bank accounts belong to a Split account and are managed by a Split user.
Split supports the use of only one verified bank account at a time. Typically, a bank account will only be added once: upon registration.

**Note:** Deleting or adding a new bank account will require the bank account to be re-verified before the Split account can transact again.

## List or add bank accounts [/bank_accounts]
**Endpoint:** `/bank_accounts`

### List all bank accounts | GET [GET]

+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9

+ Response 200 (application/json)

        {
          "data": [
            {
              "id": "55afddde-4296-4daf-8e49-7ba481ef9608",
              "account_number": "947434694",
              "branch_code": "304304",
              "verified": false
            }
          ]
        }

### Add a bank account | POST [POST]

+ Attributes
    + branch_code: 304304
    + account_number: 947434694

+ Request (application/json)

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9

    + Body
    
            {
                "account_number": "947434694",
                "branch_code": "304304"
            }
            
+ Response 201 (application/json)

        {
          "data": {
            "id": "55afddde-4296-4daf-8e49-7ba481ef9608",
            "account_number": "947434694",
            "branch_code": "304304",
            "verified": false
          }
        }

+ Response 400 (application/json)

        {
            "errors": [
                "Account number can't be blank"
            ]
        }

## Get or delete a bank account [/bank_accounts/{id}]
**Endpoint:** `/bank_accounts/{id}`

### Get a bank account | GET [GET]

+ Parameters
    + id: `55afddde-4296-4daf-8e49-7ba481ef9608` - bank account ID
    
+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
    
+ Response 200 (application/json)

        {
          "data": {
            "id": "55afddde-4296-4daf-8e49-7ba481ef9608",
            "account_number": "947434694",
            "branch_code": "304304",
            "verified": false
          }
        }
            

### Delete a bank account | DELETE [DELETE]

+ Parameters
    + id: `55afddde-4296-4daf-8e49-7ba481ef9608` - bank account ID
    
+ Response 204

# Group Contacts
Your contacts form an address book of Split accounts with whom you can interact. In order to create a [Payment](#reference/payments) or
a [Payment on Request](#reference/payments-on-request) you must first have the recipient Split account as part of your contacts.



## List contacts [/contacts{?page}]
**Endpoint:** `/contacts{?page}`

### List all contacts | GET [GET]

+ Parameters
    + page: 1 (optional) - page of results to return
    
+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
    
+ Response 200 (application/json)

    + Headers

            Link: <http:/api-sandbox.split.cash/contacts?page=2>; rel="next", <http:/api-sandbox.split.cash/contacts?page=8>; rel="last"
    
    + Body
            
            {
              "data": [
                {
                  "id": "095c5ab7-7fa8-40fd-b317-cddbbf4c8fbc",
                  "bsb": "123456",
                  "account_number": "494307",
                  "state": "active",
                  "business": {
                    "nickname": "outstanding_tours",
                    "abn": "123456789",
                    "name": "Oustanding Tours Pty Ltd"
                  }
                },
                {   
                  "id": "861ff8e4-7acf-4897-9e53-e7c5ae5f7cc0",
                  "bsb": "534446",
                  "account_number": "4395959",
                  "status": "active",
                  "business": {
                    "nickname": "adventure_dudes",
                    "abn": "126754389",
                    "name": "Adventure Dudes Pty Ltd"
                  }
                },
                {
                  "id": "3156e4e6-688e-4f95-a591-f1a4fb3b768a",
                  "bsb": "534224",
                  "account_number": "493584",
                  "status": "suspended",
                  "business": {
                    "nickname": "surfing_world",
                    "abn": "295443789",
                    "name": "Surfing World Pty Ltd"
                  }
                }
              ]
            }

### Add a new contact | POST [POST]

+ Request (application/json)

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9

    + Body
    
            {
                "nickname": "outstanding_tours"
            }


+ Response 201 (application/json)

        {
          "data": {
            "id": "55afddde-4296-4daf-8e49-7ba481ef9608",
            "account_number": "947434694",
            "branch_code": "304304",
            "state": "active",
            "business": {
              "nickname": "outstanding_tours",
              "abn": "123456789",
              "name": "Outstanding Tours Pty Ltd"
            }
          }
        }

+ Response 404 (application/json)

        {
            "errors": [
                "Cannot find requested Split account"
            ]
        }
        
## Manage contact [/contacts/{nickname}]
**Endpoint:** `/contacts/{nickname}`

### Get a contact | GET [GET]

+ Parameters
    + `nickname`: `outstanding_tours` - Contact's account nickname
    
+ Request
    
    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
    
+ Response 200 (application/json)

        {
          "data": {
            "id": "55afddde-4296-4daf-8e49-7ba481ef9608",
            "account_number": "947434694",
            "branch_code": "304304",
            "state": "active",
            "business": {
              "nickname": "outstanding_tours",
              "abn": "123456789",
              "name": "Outstanding Tours Pty Ltd"
            }
          }
        }

+ Response 404 (application/json)

        {
            "errors": [
                "Cannot find requested Split account"
            ]
        }

### Update a contact's state | PATCH [PATCH]
A contact can be either `active` or `suspended`. A suspended contact remains in the contact list but cannot be transacted with.

+ Parameters
    + nickname: `outstanding_tours` - Contact's account nickname
    
+ Attributes
    + status: suspended (string, required) - Possible values: `active`, `suspended`
    
+ Request (application/json)

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
    
+ Response 200

        {
          "data": {
            "id": "55afddde-4296-4daf-8e49-7ba481ef9608",
            "account_number": "947434694",
            "branch_code": "304304",
            "state": "suspended",
            "business": {
              "nickname": "outstanding_tours",
              "abn": "123456789",
              "name": "Outstanding Tours Pty Ltd"
            }
          }
        }


### Remove a contact | DELETE [DELETE]

+ Parameters
    + nickname: `outstanding_tours` - Contact's account nickname
    
+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
    
+ Response 204

# Group Payments

**A payment is made up of two parts:**

1. General details about the payment.
2. One or many recipients with individual amounts and descriptions. These are referred to as Payouts.

   **Example**
   
   *SuperAgent sells a package that includes a skydive & a scuba for a total of $600.*
   
   *The general details of the payment would include a description of "Skydive & Scuba Package Special" and a maturation date of 3 days later*
   
   *SuperAgent would also add the 2 suppliers as recipients of the payment to each receive $300 with personalised descriptions.*
   
## List or make a payment [/payments{?page}]
**Endpoint:** `/payments{?page}`

### List all payments | GET [GET]
+ Parameters
    + page: 1 (string, optional) - page of results to return
    
+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
    
+ Response 200 (application/json)

    + Headers

            Link: <http:/api-sandbox.split.cash/payments?page=2>; rel="next", <http:/api-sandbox.split.cash/payments?page=8>; rel="last"

    + Body
    
            {
              "data": [
                {
                  "ref": "PB.1",
                  "payouts": [
                    {
                      "ref": "D.1",
                      "batch_description": "This description is only available to the payer",
                      "matures_on": "2016-09-13T23:50:44.435Z",
                      "created_at": "2016-09-10T23:50:44.435Z",
                      "amount": 30000,
                      "description": "The recipient will see this description",
                      "from_id": "83623359-e86e-440c-9780-432a3bc3626f",
                      "to_id": "48b89364-1577-4c81-ba02-96705895d457"
                    },
                    {
                      "ref": "P.2",
                      "batch_description": "This description is only available to the payer",
                      "matures_on": "2016-09-13T23:50:44.435Z",
                      "created_at": "2016-09-10T23:50:44.435Z",
                      "amount": 30000,
                      "description": "The recipient will see this description",
                      "from_id": "48b89364-1577-4c81-ba02-96705895d457",
                      "to_id": "dc6f1e60-3803-43ca-a200-7d641816f57f"
                    }
                  ]
                }
              ]
            }

### Make a payment | POST [POST]

+ Attributes
    + description: The SuperPackage (string, required) - User description. Only visible to the payer
    + matures_on: 2016-09-13 (number, required) - Date the payment should be processed
    + payouts (array, required) - One or many contact to pay (2 recipients in this example)
        + (object)
            + amount: 30000 (number, required) - Amount in cents to pay the recipient
            + description: `A tandem skydive jump SB23094` (string, required) - Description that both the payer an recipient can see
            + to_id: `48b89364-1577-4c81-ba02-96705895d457` (string, required) - Contact to pay
        + (object)
            + amount: 30000 (number, required) - Amount in cents to pay the recipient
            + description: `A scuba dive SDS5464` (string, required) - Description that both the payer an recipient can see
            + to_id: `dc6f1e60-3803-43ca-a200-7d641816f57f` (string, required) - Contact to pay
            

+ Request (application/json)

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
        
+ Response 201 (application/json)

        {
          "data": {
            "ref": "PB.1",
            "payouts": [
              {
                "ref": "D.1",
                "batch_description": "The SuperPackage",
                "matures_on": "2016-09-13T23:50:44.435Z",
                "created_at": "2016-09-10T23:50:44.435Z",
                "amount": 30000,
                "description": "A tandem skydive jump SB23094",
                "from_id": "83623359-e86e-440c-9780-432a3bc3626f",
                "to_id": "48b89364-1577-4c81-ba02-96705895d457"
              },
              {
                "ref": "D.2",
                "batch_description": "The SuperPackage",
                "matures_on": "2016-09-13T23:50:44.435Z",
                "created_at": "2016-09-10T23:50:44.435Z",
                "amount": 30000,
                "description": "A scuba dive SDS5464",
                "from_id": "48b89364-1577-4c81-ba02-96705895d457",
                "to_id": "dc6f1e60-3803-43ca-a200-7d641816f57f"
              }
            ]
          }
        }


## Get or void a payment [/payments/{id}]
**Endpoint:** `/payments/{id}`

### Get a payment | GET [GET]

+ Parameters
    + id: `PB.1` (string, required) - Payment ref
    
+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
    
+ Response 200 (application/json)
    
        {
          "data": {
            "ref": "PB.1",
            "payouts": [
              {
                "ref": "D.1",
                "batch_description": "The SuperPackage",
                "matures_on": "2016-09-13T23:50:44.435Z",
                "created_at": "2016-09-10T23:50:44.435Z",
                "amount": 30000,
                "description": "A tandem skydive jump SB23094",
                "from_id": "83623359-e86e-440c-9780-432a3bc3626f",
                "to_id": "48b89364-1577-4c81-ba02-96705895d457"
              },
              {
                "ref": "D.2",
                "batch_description": "The SuperPackage",
                "matures_on": "2016-09-13T23:50:44.435Z",
                "created_at": "2016-09-10T23:50:44.435Z",
                "amount": 30000,
                "description": "A scuba dive SDS5464",
                "from_id": "48b89364-1577-4c81-ba02-96705895d457",
                "to_id": "dc6f1e60-3803-43ca-a200-7d641816f57f"
              }
            ]
          }
        }

### Void a payment | DELETE [DELETE]

+ Parameters
    + id: `PB.1` - Payment ref
    
+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
    
+ Response 204 (application/json)


# Group Payments on Request

> **NOTE**: This is an experimental feature that has not yet been released. Please contact us at [info@splitpayments.com.au](mailto:info@splitpayments.com.au) to get early access.

A Payment on Request (PoR) is used in order to get paid by another Split account.
A PoR is very similar to a [Payment](#reference/payments), the main differences are:

* A PoR is initiated by the recipient of the payment
* A PoR has only one recipient which is the initiator of the PoR. This happens automatically.
* A PoR needs to be approved (manually or automatically) by the PoR payer.

**Example scenario**

*Rafting Co. requires SmallAgent to pay them $500 for a rafting tour that was previously sold by SmallAgent.
Rafting Co. creates a PoR for $500 with the target Split account being SmallAgent.*

*SmallAgent will receive a notification that a PoR from Rafting Co. for $500 requires approval. Once SmallAgent approves, the payment will
be processed according to the maturation date.*

## Types
Since PoRs are visible by both the payer and payee, we identify who created the PoR by using types:

1. **Incoming:** An incoming Payment on Request (you are the payer)
2. **Outgoing:** An outgoing Payment on Request (they are the payer)

**Example**

*Split Account A (SAA) sends a PoR to Split Account B (SAB) in order to get paid.*

*SAA would see the PoR as an outgoing PoR whislt SAB would see it as an incoming PoR*

## Lifecycle

A `payment_on_request` root object can have the following states:

| State | Description |
|-------|-------------|
| `pending_approval` | Waiting for the payer to approve the payment request. |
| `approved` | The payer has approved the payment request. |
| `pending` | Waiting for the payment to mature. |
| `processing` | The payment has matured and is being processed with the banks. |
| `processed` | The payment has completed. |
| `declined` | The payer has declined the payment request. |
| `voided` | The PoR has been voided. |


## List or make a payment on request  [/payments_on_request{?page}]
**Endpoint:** `/payments_on_request{?page}`

### List all payments on request | GET [GET]
+ Parameters
    + page: 1 (string, optional) - page of results to return
    
+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
    
+ Response 200 (application/json)

    + Headers

            Link: <http:/api-sandbox.split.cash/payments?page=2>; rel="next", <http:/api-sandbox.split.cash/payments?page=8>; rel="last"

    + Body
    
            [
                {
                    "id": "06eea464-74ce-4ffc-8aef-a8fb1bef9d8f",
                    "payer_id": "de86472c-c027-4735-a6a7-234366a27fc7",
                    "type": "outgoing",
                    "ref": "SPOR-1",
                    "matures_at": "2016-09-18T23:50:44.435Z",
                    "created_at": "2016-09-10T23:50:44.435Z",
                    "status": "pending_approval"
                    "payout": {
                        "id" : "de86472c-c027-4735-a6a7-234366a27fc7",
                        "recipient_id": "48b89364-1577-4c81-ba02-96705895d457",
                        "ref": "SPO-1"
                        "amount": 29500,
                        "currency": "AUD",
                        "description": "This description is visible to the payer and payee",
                        "history": [
                            {
                                "event": "Payout created",
                                "occured_at": "2016-09-10T23:50:44.435Z"
                            }
                        ]
                    }
                },
                {
                    "id": "5078f43c-57e4-49c7-a19f-b8b850edfb7f",
                    "payer_id": "c608e871-919f-4691-92f9-b5e08af0956d",
                    "type": "outgoing",
                    "ref": "SPOR-2",
                    "matures_at": "2016-09-18T23:50:44.435Z",
                    "created_at": "2016-09-10T23:50:44.435Z",
                    "status": "pending"
                    "payout": {
                        "id" : "de86472c-c027-4735-a6a7-234366a27fc7",
                        "recipient_id": "48b89364-1577-4c81-ba02-96705895d457",
                        "ref": "SPO-2"
                        "amount": 50000,
                        "currency": "AUD",
                        "description": "This description is visible to the payer and payee",
                        "history": [
                            {
                                "event": "Payout created",
                                "occured_at": "2016-18-10T23:50:44.435Z"
                            }
                        ]
                    }
                },
                {
                    "id": "490799cd-d724-4cd4-bd2a-702289290962",
                    "payer_id": "c608e871-919f-4691-92f9-b5e08af0956d",
                    "type": "outgoing",
                    "ref": "SPOR-3",
                    "matures_at": "2016-09-13T23:50:44.435Z",
                    "created_at": "2016-09-10T23:50:44.435Z",
                    "status": "processing"
                    "payout": {
                        "id" : "ba0ac211-5c07-4e9f-b9d3-7c6586631cdb",
                        "recipient_id": "48b89364-1577-4c81-ba02-96705895d457",
                        "ref": "SPO-3"
                        "amount": 50000,
                        "currency": "AUD",
                        "description": "This description is visible to the payer and payee",
                        "history": [
                            {
                                "event": "Payout created",
                                "occured_at": "2016-09-10T23:50:44.435Z"
                            },
                            {
                                "event": "Debit payer account initiated",
                                "occured_at": "2016-09-14T05:00:00.000Z"
                            },
                            {
                                "event": "Debit payer account succeeded",
                                "occured_at": "2016-09-14T05:30:00.000Z"
                            },
                            {
                                "event": "Debit funds cleared",
                                "occured_at": "2016-09-18T05:00:00.000Z"
                            },
                            {
                                "event": "Credit recipient account initiated",
                                "occured_at": "2016-09-18T05:02:00.000Z"
                            }
                        ]
                    }
                },
                {
                    "id": "18650718-5f68-4525-b900-36e01a771bbc",
                    "payer_id": "211b1339-b108-45e4-b7b3-d896cbe02e51",
                    "type": "incoming",
                    "ref": "SPOR-4",
                    "matures_at": "2016-09-20T23:50:44.435Z",
                    "created_at": "2016-09-14T23:50:44.435Z",
                    "status": "pending_approval"
                    "payout": {
                        "id" : "de86472c-c027-4735-a6a7-234366a27fc7",
                        "recipient_id": "48b89364-1577-4c81-ba02-96705895d457",
                        "ref": "SPO-4"
                        "amount": 50000,
                        "currency": "AUD",
                        "description": "This description is visible to the payer and payee",
                        "history": [
                            {
                                "event": "Payout created",
                                "occured_at": "2016-09-14T23:50:44.435Z"
                            }
                        ]
                    }
                }
            ]

### Make a payment on request | POST [POST]

+ Attributes
    + payer_id: `de86472c-c027-4735-a6a7-234366a27fc7` (string, required) - The Split account that will action the PoR
    + description: "Rafting Co. Great Water Expedition R23094" (string, required) - Description visible to the payer & payee
    + maturation_days: 3 (number, required) - Amount of days to wait before the payment should be processed
    + amount: 29500 (number, required) - Amount in cents to pay the recipient

+ Request (application/json)

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
        
+ Response 201 (application/json)

        {
            "id": "4064b05d-187d-49e7-9099-179ddb7a3843",
            "payer_id": "de86472c-c027-4735-a6a7-234366a27fc7",
            "type": "outgoing",
            "ref": "SPOR-5",
            "matures_at": "2016-09-13T23:50:44.435Z",
            "created_at": "2016-09-10T23:50:44.435Z",
            "status": "pending_approval"
            "payout": {
                "id" : "de86472c-c027-4735-a6a7-234366a27fc7",
                "recipient_id": "48b89364-1577-4c81-ba02-96705895d457",
                "ref": "SPO-5"
                "amount": 29500,
                "currency": "AUD",
                "description": "Rafting Co. Great Water Expedition R23094",
                "history": [
                    {
                        "event": "Payout created",
                        "occured_at": "2016-09-14T23:50:44.435Z"
                    }
                ]
            }
        }


## Get or void a payment on request [/payments_on_request/{id}]
**Endpoint:** `/payments_on_request/{id}`

### Get a payment on request | GET [GET]

+ Parameters
    + id: `4064b05d-187d-49e7-9099-179ddb7a3843` (string, required) - Payment ID
    
+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
    
+ Response 200 (application/json)
    
        {
            "id": "4064b05d-187d-49e7-9099-179ddb7a3843",
            "payer_id": "de86472c-c027-4735-a6a7-234366a27fc7",
            "type": "outgoing",
            "ref": "SPOR-5",
            "matures_at": "2016-09-13T23:50:44.435Z",
            "created_at": "2016-09-10T23:50:44.435Z",
            "status": "pending_approval"
            "payout": {
                "id" : "de86472c-c027-4735-a6a7-234366a27fc7",
                "recipient_id": "48b89364-1577-4c81-ba02-96705895d457",
                "ref": "SPO-5"
                "amount": 29500,
                "currency": "AUD",
                "description": "Rafting Co. Great Water Expedition R23094",
                "history": [
                    {
                        "event": "Payout created",
                        "occured_at": "2016-09-14T23:50:44.435Z"
                    }
                ]
            }
        }

### Void a payment on request | DELETE [DELETE]
A PoR can only be voided if it has not yet been approved.

+ Parameters
    + id: `4064b05d-187d-49e7-9099-179ddb7a384` - Payment ID
    
+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
    
+ Response 204 (application/json)


# Group Refund Requests
Manage refund requests applied against successfully processed payouts.

* A refunder corresponds to a recipient of a successfully processed payout.

  **Example**
  
  *SuperAgent has a successfully processed payment with two payouts: Snowmazing for $200 & Sandgeddon for $500.*

  *SuperAgent requests a refund from Snowmazing for $200. Snowmazing will receive a refund request which they may
  approve or decline. Snowmazing approves the request.*
  
  *Split will therefore process a refund for $200 from Snowmazing to SuperAgent*
  
## Lifecycle

A `refund_request` can have the following states:
| State | Description |
|-------|-------------|
| `pending_approval` | Waiting for the refunder to approve the refund request. |
| `approved` | The refunder has approved the refund request. |
| `declined` | The refunder has declined the refund request. |
| `cancelled` | The refund request has been cancelled. |

## Outgoing refund requests [/payout_refund_requests/outgoing{?page}]
**Endpoint:** `/payout_refund_requests/outgoing{?page}`

### List all refunds | GET [GET]

+ Parameters
    + page: 1 (optional) - page of results to return
    
+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
    
+ Response 200 (application/json)

    + Headers

            Link: <http:/api-sandbox.spli.cash/payout_refund_requests?page=2>; rel="next", <http:/api-sandbox.split.cash/payout_refund_requests?page=8>; rel="last"

    + Body
    
            {
              "data":
                [
                  {
                    "ref": "PRR.1",
                    "initiator_id": "48b89364-1577-4c81-ba02-96705895d457",
                    "authoriser_id": "dc6f1e60-3803-43ca-a200-7d641816f57f",
                    "status": "pending_approval",
                    "responded_at": null,
                    "debit_ref": "D.1",
                    "amount": 5000
                  },
                  {
                    "ref": "PRR.2",
                    "initiator_id": "48b89364-1577-4c81-ba02-96705895d457",
                    "authoriser_id": "dc6f1e60-3803-43ca-a200-7d641816f57f",
                    "status": "pending_approval",
                    "debit_ref": "D.2",
                    "amount": 10000
                  }
                ]
              }
            }


## Incoming refund requests [/payout_refund_requests/incoming{?page}]
**Endpoint:** `/payout_refund_requests/incoming{?page}`

### List all refunds | GET [GET]

+ Parameters
    + page: 1 (optional) - page of results to return
    
+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
    
+ Response 200 (application/json)

    + Headers

            Link: <http:/api-sandbox.spli.cash/payout_refund_requests?page=2>; rel="next", <http:/api-sandbox.split.cash/payout_refund_requests?page=8>; rel="last"

    + Body
    
            {
              "data":
                [
                  {
                    "ref": "PRR.1",
                    "initiator_id": "48b89364-1577-4c81-ba02-96705895d457",
                    "authoriser_id": "dc6f1e60-3803-43ca-a200-7d641816f57f",
                    "status": "approved",
                    "responded_at": "2016-11-23T22:23:11.810Z",
                    "credit_ref": "C.1",
                    "amount": 5000
                  },
                  {
                    "ref": "PRR.2",
                    "initiator_id": "48b89364-1577-4c81-ba02-96705895d457",
                    "authoriser_id": "dc6f1e60-3803-43ca-a200-7d641816f57f",
                    "status": "pending_approval",
                    "responded_at": null,
                    "credit_ref": "C.2",
                    "amount": 10000
                  }
                ]
              }
            }

## Request a refund [/payout_refund_requests]
**Endpoint:** `/payout_refund_requests`

Certain rules apply to the creation of a refund:

* Must be applied against a successfully processed payout
* The refund amount requested from a payout recipient may not exceed the original amount of the payout

> **Note:** The original payout recipient(s) must approve the refund request before the refund gets processed.

### Request a refund | POST [POST]
#### Body Attributes
+ Attributes
    + `debit_ref`: `D.1` (string, required) - The payout ref to refund against
    + amount: 500 (number, required) - Amount in cents to request from the original payment recipient

+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9

    + Body
    
            {
              "debit_ref": "D.1",
              "amount": 500
            }

+ Response 201 (application/json)

        {
          "data": {
            "ref": "PRR.1",
            "initiator_id": "48b89364-1577-4c81-ba02-96705895d457",
            "authoriser_id": "dc6f1e60-3803-43ca-a200-7d641816f57f",
            "status": "pending_approval",
            "responded_at": null,
            "debit_ref": "D.1",
            "amount": 10000
          }
        }


## Retrieve or void a refund [/payout_refund_requests/{ref}]
**Endpoint:** `/payout_refund_requests/{ref}`

A refund request can only be voided if it is still `pending_approval`.

### Retrieve a refund request | GET [GET]

+ Parameters
    + ref: `PRR.1` (string, required) - refund request ref
    
+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
    
+ Response 200 (application/json)
    
        {
          "data": {
            "ref": "PRR.1",
            "initiator_id": "48b89364-1577-4c81-ba02-96705895d457",
            "authoriser_id": "dc6f1e60-3803-43ca-a200-7d641816f57f",
            "status": "pending_approval",
            "responded_at": null,
            "debit_ref": "D.1",
            "amount": 5000
          }
        }

### Cancel a refund request | DELETE [DELETE]

A refund request can only be canceled if it is pending approval.

+ Parameters
    + ref: `PRR.1` (required) - refund request ref

+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9

+ Response 204

# Group Transactions
The transactions endpoint provides a detailed look at all past, current and future scheduled debits & credits relating
to the Split account.

In other words, we not only show the transactions initiated by the Split account but also show transactions where the Split account
is on the receiving end - even for payments that have not yet matured!


## List transactions [/transactions{?page}]

### List all transactions | GET [GET]

+ Parameters
    + page: 1 (optional) - page of results to return
    
+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9
    
+ Response 200 (application/json)

    + Headers

            Link: <http:/api-sandbox.spli.cash/transactions?page=2>; rel="next", <http:/api-sandbox.split.cash/transactions?page=8>; rel="last"

    + Body
    
            {  
              "data":[  
                {  
                  "ref":"D.3",
                  "parent_ref":null,
                  "type":"debit",
                  "category":"payout_refund",
                  "created_at":"2016-12-07T23:15:00.000Z",
                  "matures_on":"2016-12-10",
                  "cleared_at":null,
                  "bank_ref":null,
                  "status":"Pending",
                  "party_name":"Sanford-Rees",
                  "party_nickname":"sanford-rees-8",
                  "description":null,
                  "amount":1
                },
                {  
                  "ref":"D.2",
                  "parent_ref":"PB.2",
                  "type":"debit",
                  "category":"payout",
                  "created_at":"2016-12-06T23:15:00.000Z",
                  "matures_on":"2016-12-09",
                  "cleared_at":null,
                  "bank_ref":null,
                  "status":"Pending",
                  "party_name":"Gutmann-Schmidt",
                  "party_nickname":"gutmann-schmidt-6",
                  "description":null,
                  "amount":1
                },
                {  
                  "ref":"C.2",
                  "parent_ref":null,
                  "type":"credit",
                  "category":"payout",
                  "created_at":"2016-12-05T23:15:00.000Z",
                  "matures_on":"2016-12-05",
                  "cleared_at":"2016-12-05T23:15:00.000Z",
                  "bank_ref":"CT.1",
                  "status":"Pending",
                  "party_name":"Price and Sons",
                  "party_nickname":"price-and-sons-2",
                  "description":null,
                  "amount":1
                }
              ]
            }

# Group Users
All actions from this endpoint are performed against the currently authenticated user.

## Get or update user [/user]
**Endpoint:** `/user`

### Get user details | GET [GET]

+ Request

    + Headers
    
            Authorization: Bearer 147a57a47cc2b21bf7a51e460a2835b646129f41ee420ac73ebf0b5b805229a9

+ Response 200 (application/json)

        {
          "data": {
            "first_name": "Bear",
            "last_name": "Dog",
            "mobile_phone": "0456945832",
            "email": "bear@dog.com",
            "business": {
              "name": "Dog Bones Inc",
              "nickname": "dog-bones-inc",
              "abn": "129959040",
              "phone": "0418495033",
              "street_address": "98 Acme Avenue",
              "suburb": "Lead",
              "state": "NSW",
              "postcode": "2478"
            }
          }
        }